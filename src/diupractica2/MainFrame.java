/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diupractica2;

import java.util.concurrent.ThreadLocalRandom;

/**
 *
 * @author Miguel & Alejandro
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private int size;
    private int min;
    private int max;
    private int[][] matrix;
    public MainFrame() {
        initComponents();
        execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UpperPanel = new javax.swing.JPanel();
        dimensionLabel = new javax.swing.JLabel();
        dimensionTextField = new javax.swing.JTextField();
        minValueLabel = new javax.swing.JLabel();
        minValueTextField = new javax.swing.JTextField();
        maxValueLabel = new javax.swing.JLabel();
        maxValueTextField = new javax.swing.JTextField();
        umbralLabel = new javax.swing.JLabel();
        umbralSlider = new javax.swing.JSlider();
        LowerPanel = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane();
        matrixTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dimensionLabel.setText("Dimensión Matriz Cuadrada:");

        dimensionTextField.setText("7");
        dimensionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dimensionTextFieldKeyReleased(evt);
            }
        });

        minValueLabel.setText("Valor Mínimo Matriz:");

        minValueTextField.setText("50");
        minValueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minValueTextFieldKeyReleased(evt);
            }
        });

        maxValueLabel.setText("Valor Máximo Matriz:");

        maxValueTextField.setText("120");
        maxValueTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxValueTextFieldKeyReleased(evt);
            }
        });

        umbralLabel.setText("Umbral:");

        umbralSlider.setPaintLabels(true);
        umbralSlider.setPaintTicks(true);
        umbralSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbralSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout UpperPanelLayout = new javax.swing.GroupLayout(UpperPanel);
        UpperPanel.setLayout(UpperPanelLayout);
        UpperPanelLayout.setHorizontalGroup(
            UpperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpperPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UpperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpperPanelLayout.createSequentialGroup()
                        .addComponent(umbralLabel)
                        .addGap(18, 18, 18)
                        .addComponent(umbralSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(UpperPanelLayout.createSequentialGroup()
                        .addGroup(UpperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(UpperPanelLayout.createSequentialGroup()
                                .addComponent(dimensionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dimensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(UpperPanelLayout.createSequentialGroup()
                                .addComponent(minValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(minValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(maxValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(maxValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 306, Short.MAX_VALUE)))
                .addContainerGap())
        );
        UpperPanelLayout.setVerticalGroup(
            UpperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpperPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UpperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dimensionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dimensionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UpperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(UpperPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(umbralLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(umbralSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        matrixTextArea.setEditable(false);
        matrixTextArea.setColumns(20);
        matrixTextArea.setRows(5);
        scrollPanel.setViewportView(matrixTextArea);

        javax.swing.GroupLayout LowerPanelLayout = new javax.swing.GroupLayout(LowerPanel);
        LowerPanel.setLayout(LowerPanelLayout);
        LowerPanelLayout.setHorizontalGroup(
            LowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPanel)
                .addContainerGap())
        );
        LowerPanelLayout.setVerticalGroup(
            LowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UpperPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UpperPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(LowerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void umbralSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralSliderStateChanged
        showMatrix();
    }//GEN-LAST:event_umbralSliderStateChanged

    private void dimensionTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dimensionTextFieldKeyReleased
        if(!(matchesTextConditions()))return;
        if(somethingEmpty() || exceedLimit()) return;
        execute();
    }//GEN-LAST:event_dimensionTextFieldKeyReleased

    private void minValueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minValueTextFieldKeyReleased
        if(!(matchesTextConditions()))return;
        if(somethingEmpty() || exceedLimit()) return;
        refreshValues();
        if(maxValueIsLesserThanMinValue()){
            return;
        }
        executeNoRefreshingValues();
    }//GEN-LAST:event_minValueTextFieldKeyReleased

    private void maxValueTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxValueTextFieldKeyReleased
        if(!(matchesTextConditions()))return;
        if(somethingEmpty() || exceedLimit()) return;
        refreshValues();
        if(maxValueIsLesserThanMinValue()){
            return;
        }
        executeNoRefreshingValues();
    }//GEN-LAST:event_maxValueTextFieldKeyReleased

    
    private boolean maxValueIsLesserThanMinValue() throws NumberFormatException {
        return (max - min) < 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel LowerPanel;
    private javax.swing.JPanel UpperPanel;
    private javax.swing.JLabel dimensionLabel;
    private javax.swing.JTextField dimensionTextField;
    private javax.swing.JTextArea matrixTextArea;
    private javax.swing.JLabel maxValueLabel;
    private javax.swing.JTextField maxValueTextField;
    private javax.swing.JLabel minValueLabel;
    private javax.swing.JTextField minValueTextField;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JLabel umbralLabel;
    private javax.swing.JSlider umbralSlider;
    // End of variables declaration//GEN-END:variables

    private int[][] generateMatrix() {
        matrix = new int[size][size];
        for (int i = 0; i < size; i++)
            for (int j = 0; j < size; j++) matrix[i][j] = ThreadLocalRandom.current().nextInt(min, max + 1);
       return matrix;
    }

    private void refreshValues() {
        size = Integer.parseInt(this.dimensionTextField.getText());
        min = Integer.parseInt(this.minValueTextField.getText());
        max = Integer.parseInt(this.maxValueTextField.getText());
    }

    private void setSliderConfiguration() {
        umbralSlider.setMaximum(max);
        umbralSlider.setMinimum(min);
        umbralSlider.setPaintLabels(true);
        umbralSlider.setPaintTicks(true);
        umbralSlider.setValue((max+min)/2);
    }

    private void showMatrix() {
        matrixTextArea.setText(matrixToString());
    }

    private String matrixToString(){
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++){
                if(matrix[i][j] <= umbralSlider.getValue()) str.append("-\t");
                else str.append(matrix[i][j]).append("\t");
            }
            if(i+1 == matrix.length) break;
            str.append("\n");
        }
        return str.toString();
    }

    private void execute() {
        refreshValues();
        executeNoRefreshingValues();
    }
    
    private void executeNoRefreshingValues() {
        matrix = generateMatrix();
        setSliderConfiguration();
        showMatrix();
    }

    private boolean exceedLimit() {
        if(Integer.parseInt(this.minValueTextField.getText()) > 999999999 || 
                Integer.parseInt(this.minValueTextField.getText())< -999999999){
            return true;
        }
        if(Integer.parseInt(this.maxValueTextField.getText()) > 999999999 || 
                Integer.parseInt(this.maxValueTextField.getText())< -999999999){
            return true;
        }
        if(Integer.parseInt(this.dimensionTextField.getText()) >= 500 || 
                Integer.parseInt(this.dimensionTextField.getText()) < 0){
            return true;
        }
        return false;
    }
    
    private boolean matchesTextConditions(){
        if(!(maxValueTextField.getText().matches("[0-9]+") ||
                minValueTextField.getText().matches("[0-9]+") || 
                    dimensionTextField.getText().matches("[0-9]+"))){
            return false;
        }
        return true;
    }

    private boolean somethingEmpty() {
        if(maxValueTextField.getText().isEmpty() || minValueTextField.getText().isEmpty()
                || dimensionTextField.getText().isEmpty()){
            return true;
        }
        return false;
    }
    
}
